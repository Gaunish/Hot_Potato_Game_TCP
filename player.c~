#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <time.h>
#include "helper.h"
#include "potato.h"

#define HOST_LEN 100
#define PORT 8081

int main(int argc, char *argv[]){
  if(argc != 3){
    perror("Invalid arguments\nUsage: player <server_name> <port>");
    exit(1);
  }

  fd_set master; // master file descriptor list
  fd_set read_fds; // temp file descriptor list for select()
  int fdmax; // maximum file descriptor number
  FD_ZERO(&master); // clear the master and temp sets
  FD_ZERO(&read_fds);
  

  //GET own ip address
  char own_host[HOST_LEN];
  gethostname(own_host, HOST_LEN);
  struct hostent * host_info = gethostbyname(own_host);
  char * ip = inet_ntoa(*((struct in_addr*)host_info->h_addr_list[0]));  
  
  //bind to own socket
  //get port number
  int sock_send = socket(PF_INET , SOCK_STREAM , 0);

  struct sockaddr_in sin;
  memset(&sin, 0, sizeof(sin));
  sin.sin_family = AF_INET;
  sin.sin_port = htons(0);
  sin.sin_addr.s_addr = inet_addr(ip);

  int yes = 1;
  if (setsockopt(sock_send, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1) {
      perror("Cannot set socket\n");
      exit(1);
  }

  bind(sock_send, (struct sockaddr *)&sin, sizeof(sin));
  int len = sizeof(sin);
  if (getsockname(sock_send, (struct sockaddr *)&sin, &len) == -1){
    perror("getsockname");
  }
  else{
    printf("port number %d\n", ntohs(sin.sin_port));
  }
  int own_port = ntohs(sin.sin_port);
  if(listen(sock_send, 100) == -1){
    perror("listen error:");
    return -1;
  }
  
  //connect to server
  int sock_rec = get_sock(argv[1], argv[2], 1);
  FD_SET(sock_rec, &master);
  fdmax = sock_rec;

  //send own ip address, port
  send_data(sock_rec, ip, HOST_LEN);
  send_data(sock_rec, &own_port, sizeof(own_port)); 
  
  //get data from ringmaster
  int own_id, left_port, right_port;
  char left_ip[HOST_LEN], right_ip[HOST_LEN];

  //own data
  int own_len = rec_data(sock_rec, &own_id, sizeof(own_id));
  //rec_data(sock_rec, &own_port, sizeof(own_port)); 

  //int sock_send = get_sock(ip, own_port, 0);
  
  char own_addr[6];
  sprintf(own_addr, "%d", own_port);
  own_addr[own_len + 1] = '\0';

  /*int sock_send = get_sock(ip, own_addr, 0);
  if(listen(sock_send, 100) == -1){
    perror("listen error:");
    return -1;
    }*/

  //left player
  //int left_len = rec_data(sock_rec, &left_port, sizeof(left_port)); 
  //rec_data(sock_rec, left_ip, HOST_LEN);

  //right player
  int right_len = rec_data(sock_rec, &right_port, sizeof(right_port)); 
  rec_data(sock_rec, right_ip, HOST_LEN);

  char right_addr[6];
  //sprintf(left_addr, "%d", left_port);
  sprintf(right_addr, "%d", right_port);
  //left_addr[left_len + 1] = '\0';
  right_addr[right_len + 1] = '\0';
  
 
  printf("%s:%s", own_addr, right_addr);

  /*fdmax = sock_rec;
  read_fds = master; // copy it
  if (select(fdmax+1, &read_fds, NULL, NULL, NULL) == -1) {
    perror("select");
    exit(4);
    }*/

  //int sock_left = get_sock(left_ip, left_addr, 1); 
  //fcntl(sock_rec, F_SETFL, O_NONBLOCK); 
  //rec_data(sock_f, &y, sizeof(y));
  //printf("recieved %d\n", y);
 

  /* int yes = 1;
  int out = 0;
  while(out != -1){
  struct addrinfo * ptr = init_addr(right_ip, right_addr);
  int sock_t = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
  setsockopt(sock_t, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int));
  out = connect(sock_t, ptr->ai_addr, ptr->ai_addrlen);
  freeaddrinfo(ptr);
  printf("%d", out);
  int sock_f = sock_accept(sock_send); 
  }*/
  
  //Connect to right player
  int sock_right = get_sock(right_ip, right_addr, 1);
  //printf("%d : %d", sock_send, sock_left);
  //int n = 7;
  //send_data(sock_left, &n, sizeof(n));
 
  int sock_left = sock_accept(sock_send);
  //int y;
  //rec_data(sock_f, &y, sizeof(y));
  //printf("recieved %d\n", y);
  FD_SET(sock_left, &master);
  if(sock_left > fdmax){
    fdmax = sock_left;
  }
  FD_SET(sock_right, &master);
  if(sock_right > fdmax){
    fdmax = sock_right;
  }

  potato *p = potato_init("0", 0);
  int * players;
  int read_potato_init = 0, read_p, read_q;
   while(1){
    read_fds = master; 
    if (select(fdmax+1, &read_fds, NULL, NULL, NULL) == -1) {
      perror("select");
      exit(1);
     }

    if(read_potato_init == 0){
    if(FD_ISSET(sock_rec,&read_fds)){
      read_p = rec_data(sock_rec, p, sizeof(*p));
      printf("recived %d bits\n", read_p);
      if(read_p != 0){
      printf("HOPS : %d", p->index);
      }
      players = malloc(p->len * sizeof(*players));

      read_q = rec_data(sock_rec, players, p->len * sizeof(*players));
      printf("recived %d bits\n", read_q);
      read_potato_init = 1;
    }
    }
    if(read_p != 0 && read_q != 0){
      append_player(p, players, own_id);
      printf("Player ID : %d\n", players[0]);
      srand((unsigned int)time(NULL));
      int player_sel = rand() % 2;
      printf("Player selected : %d\n", player_sel);
      if(player_sel == 0){
	send_data(sock_left, p, sizeof(*p));
	send_data(sock_left, players, p->len * sizeof(*players));
	printf("hhii\n");
      }
      else{
	send_data(sock_right, p, sizeof(*p));
	send_data(sock_right, players, p->len * sizeof(*players));
	printf("lloo\n");
      }
    }
    break;
  }

  /* while(1){
     read_fds = master; 
     if (select(fdmax+1, &read_fds, NULL, NULL, NULL) == -1) {
      perror("select");
      exit(1);
     }

     if(FD_ISSET(sock_left,&read_fds)){
      read_p = rec_data(sock_rec, p, sizeof(*p));
      printf("recived %d bits\n", read_p);
      if(read_p != 0){
      printf("HOPS : %d", p->index);
      }
      players = malloc(p->len * sizeof(*players));

      read_q = rec_data(sock_rec, players, p->len * sizeof(*players));
      printf("recived %d bits\n", read_q);
    
     }
     else if(FD_ISSET(sock_right,&read_fds)){
      read_p = rec_data(sock_rec, p, sizeof(*p));
      printf("recived %d bits\n", read_p);
      if(read_p != 0){
      printf("HOPS : %d", p->index);
      }
      players = malloc(p->len * sizeof(*players));

      read_q = rec_data(sock_rec, players, p->len * sizeof(*players));
      printf("recived %d bits\n", read_q);
      read_potato_init = 1;
     }
     
     if(read_p != 0 && read_q != 0){
      append_player(p, players, own_id);
      print_hops(p, players);
     }
     break;
     }*/
 
  
  //fd_set master; // master file descriptor list
  //fd_set read_fds; // temp file descriptor list for select()
  //int fdmax; // maximum file descriptor number
  //FD_ZERO(&master); // clear the master and temp sets
  //FD_ZERO(&read_fds);
  

  close(sock_left);
  close(sock_right);
  close(sock_send);
  close(sock_rec);
  
}
