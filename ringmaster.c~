#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>  
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>
#include <time.h>
#include "potato.h"
#include "helper.h"

#define HOST_LEN 100

int main(int argc, char ** argv){
  //Invalid arguments
  if(argc != 4){
    perror("Invalid arguments\nUsage: ringmaster <port_num> <num_players> <num_hops>");
    exit(1);
  }
  if(atoi(argv[2]) <= 1){
    perror("Invalid no of players");
    exit(1);
  }
  if(atoi(argv[3]) < 0 || atoi(argv[3]) > 512){
    perror("Invalid no of hops");
    exit(1);
  }

  //master file descriptor, temp fd
  fd_set master, readfd;
  //max fd no
  int maxfd = -1;
  //clear the fds
  FD_ZERO(&master);
  FD_ZERO(&readfd);

  //bind to own socket
  int sock_rec = get_sock(NULL, argv[1], 0);

  //Connect to given no of players
  //keep track of id of each player
  int id = 0;
  int no_players = atoi(argv[2]);

  //init potato
  int len = 10;
  potato * p = potato_init(argv[3], len);
  int * players = malloc(len * sizeof(*players));
  
  //wait for incoming connections
  if(listen(sock_rec, no_players) == -1){
    return -1;
  }
 
  //init player related infos
  char * players_addr[no_players];
  for(int i = 0; i < no_players; i++){
    players_addr[i] = malloc(HOST_LEN * sizeof(*players_addr[i]));
  }
  int sockets[no_players], ports[no_players];
  
  //get connections
  while(id < no_players){
    //accept the socket
    int sock_send = sock_accept(sock_rec);
    if(sock_send == -1){
      continue;
    }
    printf("Player %d is ready to play\n", id);

    //get connected socket fd
    sockets[id] = sock_send;
    //store connected ip address
    rec_data(sock_send, players_addr[id], HOST_LEN);
    rec_data(sock_send, &ports[id], sizeof(ports[id])); 
    printf("host name : %s\n", players_addr[id]);
    //ports[id] = atoi(argv[1]) + id + 1;

    //add to select list
    FD_SET(sockets[id], &master);
    if(sockets[id] > maxfd){
      maxfd = sockets[id];
    }
    
    id++;
  }

  //reset id 
  id = 0;
 
  //send connection infos
  while(id < no_players){
    //get left id
    int left = id - 1;
    if(id == 0){
      left = no_players - 1;
    }
    //get right id
    int right = (id + 1) % no_players;

    int port_own = id + atoi(argv[1]) + 1;
    //send own id, port
    send_data(sockets[id], &id, sizeof(id));
    //send_data(sockets[id], &ports[id], sizeof(ports[id])); 
    //send_data(sockets[id], &port_own, sizeof(id)); 


    int port_l = left + atoi(argv[1]) + 1;
    //left player port, ip
    send_data(sockets[id], &ports[left], sizeof(ports[left]));
    send_data(sockets[id], players_addr[left], HOST_LEN);

    //int port_r = right + atoi(argv[1]) + 1;
    //right player port, ip
    //send_data(sockets[id], &ports[right], sizeof(ports[right]));
    //send_data(sockets[id], players_addr[right], HOST_LEN);
    
    id++;
  }

  //select random player
  srand((unsigned int)time(NULL));
  int player_sel = rand() % no_players;
  printf("player selected: %d\n", player_sel);

  //send potato
  int hops = 10;
  send_data(sockets[player_sel], p, sizeof(*p));
  send_data(sockets[player_sel], players, len * sizeof(*players)); 
    
  //close socket
  close(sock_rec);

  //free memory allocated
  free(players);
  free(p);

  return 0;
}
